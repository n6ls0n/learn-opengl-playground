// Solutions for all 4 variations

// == ==============================================================================================
//       DESERT
// == ==============================================================================================
glClearColor(0.75f, 0.52f, 0.3f, 1.0f);
[...]
glm::vec3 pointLightColors[] = {
    glm::vec3(1.0f, 0.6f, 0.0f),
    glm::vec3(1.0f, 0.0f, 0.0f),
    glm::vec3(1.0f, 1.0, 0.0),
    glm::vec3(0.2f, 0.2f, 1.0f)
};
[...]
// Directional light
lightingShader.setVec3("dirLight.direction", glm::vec3(-0.2f, -1.0f, -0.3f));
lightingShader.setVec3("dirLight.ambient", glm::vec3(0.3f, 0.24f, 0.14f));
lightingShader.setVec3("dirLight.diffuse", glm::vec3(0.7f, 0.42f, 0.26f));
lightingShader.setVec3("dirLight.specular", glm::vec3(0.5f, 0.5f, 0.5f));

// Point light 1
lightingShader.setVec3("pointLights[0].position", pointLightPositions[0]);
lightingShader.setVec3("pointLights[0].ambient", pointLightColors[0] * 0.1f);
lightingShader.setVec3("pointLights[0].diffuse", pointLightColors[0]);
lightingShader.setVec3("pointLights[0].specular", pointLightColors[0]);
lightingShader.setFloat("pointLights[0].constant", 1.0f);
lightingShader.setFloat("pointLights[0].linear", 0.09f);
lightingShader.setFloat("pointLights[0].quadratic", 0.032f);

// Point light 2
lightingShader.setVec3("pointLights[1].position", pointLightPositions[1]);
lightingShader.setVec3("pointLights[1].ambient", pointLightColors[1] * 0.1f);
lightingShader.setVec3("pointLights[1].diffuse", pointLightColors[1]);
lightingShader.setVec3("pointLights[1].specular", pointLightColors[1]);
lightingShader.setFloat("pointLights[1].constant", 1.0f);
lightingShader.setFloat("pointLights[1].linear", 0.09f);
lightingShader.setFloat("pointLights[1].quadratic", 0.032f);

// Point light 3
lightingShader.setVec3("pointLights[2].position", pointLightPositions[2]);
lightingShader.setVec3("pointLights[2].ambient", pointLightColors[2] * 0.1f);
lightingShader.setVec3("pointLights[2].diffuse", pointLightColors[2]);
lightingShader.setVec3("pointLights[2].specular", pointLightColors[2]);
lightingShader.setFloat("pointLights[2].constant", 1.0f);
lightingShader.setFloat("pointLights[2].linear", 0.09f);
lightingShader.setFloat("pointLights[2].quadratic", 0.032f);

// Point light 4
lightingShader.setVec3("pointLights[3].position", pointLightPositions[3]);
lightingShader.setVec3("pointLights[3].ambient", pointLightColors[3] * 0.1f);
lightingShader.setVec3("pointLights[3].diffuse", pointLightColors[3]);
lightingShader.setVec3("pointLights[3].specular", pointLightColors[3]);
lightingShader.setFloat("pointLights[3].constant", 1.0f);
lightingShader.setFloat("pointLights[3].linear", 0.09f);
lightingShader.setFloat("pointLights[3].quadratic", 0.032f);

// SpotLight
lightingShader.setVec3("spotLight.position", camera.Position);
lightingShader.setVec3("spotLight.direction", camera.Front);
lightingShader.setVec3("spotLight.ambient", glm::vec3(0.0f, 0.0f, 0.0f));
lightingShader.setVec3("spotLight.diffuse", glm::vec3(0.8f, 0.8f, 0.0f));
lightingShader.setVec3("spotLight.specular", glm::vec3(0.8f, 0.8f, 0.0f));
lightingShader.setFloat("spotLight.constant", 1.0f);
lightingShader.setFloat("spotLight.linear", 0.09f);
lightingShader.setFloat("spotLight.quadratic", 0.032f);
lightingShader.setFloat("spotLight.cutOff", glm::cos(glm::radians(12.5f)));
lightingShader.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(13.0f)));

// == ==============================================================================================
//       FACTORY
// == ==============================================================================================
glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
[...]
glm::vec3 pointLightColors[] = {
    glm::vec3(0.2f, 0.2f, 0.6f),
    glm::vec3(0.3f, 0.3f, 0.7f),
    glm::vec3(0.0f, 0.0f, 0.3f),
    glm::vec3(0.4f, 0.4f, 0.4f)
};
[...]
// Directional light
lightingShader.setVec3("dirLight.direction", glm::vec3(-0.2f, -1.0f, -0.3f));
lightingShader.setVec3("dirLight.ambient", glm::vec3(0.05f, 0.05f, 0.1f));
lightingShader.setVec3("dirLight.diffuse", glm::vec3(0.2f, 0.2f, 0.7));
lightingShader.setVec3("dirLight.specular", glm::vec3(0.7f, 0.7f, 0.7f));

// Point light 1
lightingShader.setVec3("pointLights[0].position", pointLightPositions[0]);
lightingShader.setVec3("pointLights[0].ambient", pointLightColors[0] * 0.1f);
lightingShader.setVec3("pointLights[0].diffuse", pointLightColors[0]);
lightingShader.setVec3("pointLights[0].specular", pointLightColors[0]);
lightingShader.setFloat("pointLights[0].constant", 1.0f);
lightingShader.setFloat("pointLights[0].linear", 0.09f);
lightingShader.setFloat("pointLights[0].quadratic", 0.032f);

// Point light 2
lightingShader.setVec3("pointLights[1].position", pointLightPositions[1]);
lightingShader.setVec3("pointLights[1].ambient", pointLightColors[1] * 0.1f);
lightingShader.setVec3("pointLights[1].diffuse", pointLightColors[1]);
lightingShader.setVec3("pointLights[1].specular", pointLightColors[1]);
lightingShader.setFloat("pointLights[1].constant", 1.0f);
lightingShader.setFloat("pointLights[1].linear", 0.09f);
lightingShader.setFloat("pointLights[1].quadratic", 0.032f);

// Point light 3
lightingShader.setVec3("pointLights[2].position", pointLightPositions[2]);
lightingShader.setVec3("pointLights[2].ambient", pointLightColors[2] * 0.1f);
lightingShader.setVec3("pointLights[2].diffuse", pointLightColors[2]);
lightingShader.setVec3("pointLights[2].specular", pointLightColors[2]);
lightingShader.setFloat("pointLights[2].constant", 1.0f);
lightingShader.setFloat("pointLights[2].linear", 0.09f);
lightingShader.setFloat("pointLights[2].quadratic", 0.032f);

// Point light 4
lightingShader.setVec3("pointLights[3].position", pointLightPositions[3]);
lightingShader.setVec3("pointLights[3].ambient", pointLightColors[3] * 0.1f);
lightingShader.setVec3("pointLights[3].diffuse", pointLightColors[3]);
lightingShader.setVec3("pointLights[3].specular", pointLightColors[3]);
lightingShader.setFloat("pointLights[3].constant", 1.0f);
lightingShader.setFloat("pointLights[3].linear", 0.09f);
lightingShader.setFloat("pointLights[3].quadratic", 0.032);

// SpotLight
lightingShader.setVec3("spotLight.position", camera.Position);
lightingShader.setVec3("spotLight.direction", camera.Front);
lightingShader.setVec3("spotLight.ambient", glm::vec3(0.0f, 0.0f, 0.0f));
lightingShader.setVec3("spotLight.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
lightingShader.setVec3("spotLight.specular", glm::vec3(1.0f, 1.0f, 1.0f));
lightingShader.setFloat("spotLight.constant", 1.0f);
lightingShader.setFloat("spotLight.linear", 0.009f);
lightingShader.setFloat("spotLight.quadratic", 0.0032f);
lightingShader.setFloat("spotLight.cutOff", glm::cos(glm::radians(10.0f)));
lightingShader.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(12.5f)));

// == ==============================================================================================
//       HORROR
// == ==============================================================================================
glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
[...]
glm::vec3 pointLightColors[] = {
    glm::vec3(0.1f, 0.1f, 0.1f),
    glm::vec3(0.1f, 0.1f, 0.1f),
    glm::vec3(0.1f, 0.1f, 0.1f),
    glm::vec3(0.3f, 0.1f, 0.1f)
};
[...]
// Directional light
lightingShader.setVec3("dirLight.direction", glm::vec3(-0.2f, -1.0f, -0.3f));
lightingShader.setVec3("dirLight.ambient", glm::vec3(0.0f, 0.0f, 0.0f));
lightingShader.setVec3("dirLight.diffuse", glm::vec3(0.05f, 0.05f, 0.05));
lightingShader.setVec3("dirLight.specular", glm::vec3(0.2f, 0.2f, 0.2f));

// Point light 1
lightingShader.setVec3("pointLights[0].position", pointLightPositions[0]);
lightingShader.setVec3("pointLights[0].ambient", pointLightColors[0] * 0.1f);
lightingShader.setVec3("pointLights[0].diffuse", pointLightColors[0]);
lightingShader.setVec3("pointLights[0].specular", pointLightColors[0]);
lightingShader.setFloat("pointLights[0].constant", 1.0f);
lightingShader.setFloat("pointLights[0].linear", 0.14f);
lightingShader.setFloat("pointLights[0].quadratic", 0.07f);

// Point light 2
lightingShader.setVec3("pointLights[1].position", pointLightPositions[1]);
lightingShader.setVec3("pointLights[1].ambient", pointLightColors[1] * 0.1f);
lightingShader.setVec3("pointLights[1].diffuse", pointLightColors[1]);
lightingShader.setVec3("pointLights[1].specular", pointLightColors[1]);
lightingShader.setFloat("pointLights[1].constant", 1.0f);
lightingShader.setFloat("pointLights[1].linear", 0.14f);
lightingShader.setFloat("pointLights[1].quadratic", 0.07f);

// Point light 3
lightingShader.setVec3("pointLights[2].position", pointLightPositions[2]);
lightingShader.setVec3("pointLights[2].ambient", pointLightColors[2] * 0.1f);
lightingShader.setVec3("pointLights[2].diffuse", pointLightColors[2]);
lightingShader.setVec3("pointLights[2].specular", pointLightColors[2]);
lightingShader.setFloat("pointLights[2].constant", 1.0f);
lightingShader.setFloat("pointLights[2].linear", 0.22f);
lightingShader.setFloat("pointLights[2].quadratic", 0.20f);

// Point light 4
lightingShader.setVec3("pointLights[3].position", pointLightPositions[3]);
lightingShader.setVec3("pointLights[3].ambient", pointLightColors[3] * 0.1f);
lightingShader.setVec3("pointLights[3].diffuse", pointLightColors[3]);
lightingShader.setVec3("pointLights[3].specular", pointLightColors[3]);
lightingShader.setFloat("pointLights[3].constant", 1.0f);
lightingShader.setFloat("pointLights[3].linear", 0.14f);
lightingShader.setFloat("pointLights[3].quadratic", 0.07f);

// SpotLight
lightingShader.setVec3("spotLight.position", camera.Position);
lightingShader.setVec3("spotLight.direction", camera.Front);
lightingShader.setVec3("spotLight.ambient", glm::vec3(0.0f, 0.0f, 0.0f));
lightingShader.setVec3("spotLight.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
lightingShader.setVec3("spotLight.specular", glm::vec3(1.0f, 1.0f, 1.0f));
lightingShader.setFloat("spotLight.constant", 1.0f);
lightingShader.setFloat("spotLight.linear", 0.09f);
lightingShader.setFloat("spotLight.quadratic", 0.032f);
lightingShader.setFloat("spotLight.cutOff", glm::cos(glm::radians(10.0f)));
lightingShader.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(15.0f)));

// == ==============================================================================================
//       BIOCHEMICAL LAB
// == ==============================================================================================
glClearColor(0.9f, 0.9f, 0.9f, 1.0f);
[...]
glm::vec3 pointLightColors[] = {
    glm::vec3(0.4f, 0.7f, 0.1f),
    glm::vec3(0.4f, 0.7f, 0.1f),
    glm::vec3(0.4f, 0.7f, 0.1f),
    glm::vec3(0.4f, 0.7f, 0.1f)
};
[...]
// Directional light
lightingShader.setVec3("dirLight.direction", glm::vec3(-0.2f, -1.0f, -0.3f));
lightingShader.setVec3("dirLight.ambient", glm::vec3(0.5f, 0.5f, 0.5f));
lightingShader.setVec3("dirLight.diffuse", glm::vec3(1.0f, 1.0f, 1.0f));
lightingShader.setVec3("dirLight.specular", glm::vec3(1.0f, 1.0f, 1.0f));

// Point light 1
lightingShader.setVec3("pointLights[0].position", pointLightPositions[0]);
lightingShader.setVec3("pointLights[0].ambient", pointLightColors[0] * 0.1f);
lightingShader.setVec3("pointLights[0].diffuse", pointLightColors[0]);
lightingShader.setVec3("pointLights[0].specular", pointLightColors[0]);
lightingShader.setFloat("pointLights[0].constant", 1.0f);
lightingShader.setFloat("pointLights[0].linear", 0.07f);
lightingShader.setFloat("pointLights[0].quadratic", 0.017f);

// Point light 2
lightingShader.setVec3("pointLights[1].position", pointLightPositions[1]);
lightingShader.setVec3("pointLights[1].ambient", pointLightColors[1] * 0.1f);
lightingShader.setVec3("pointLights[1].diffuse", pointLightColors[1]);
lightingShader.setVec3("pointLights[1].specular", pointLightColors[1]);
lightingShader.setFloat("pointLights[1].constant", 1.0f);
lightingShader.setFloat("pointLights[1].linear", 0.07f);
lightingShader.setFloat("pointLights[1].quadratic", 0.017f);

// Point light 3
lightingShader.setVec3("pointLights[2].position", pointLightPositions[2]);
lightingShader.setVec3("pointLights[2].ambient", pointLightColors[2] * 0.1f);
lightingShader.setVec3("pointLights[2].diffuse", pointLightColors[2]);
lightingShader.setVec3("pointLights[2].specular", pointLightColors[2]);
lightingShader.setFloat("pointLights[2].constant", 1.0f);
lightingShader.setFloat("pointLights[2].linear", 0.07f);
lightingShader.setFloat("pointLights[2].quadratic", 0.017f);

// Point light 4
lightingShader.setVec3("pointLights[3].position", pointLightPositions[3]);
lightingShader.setVec3("pointLights[3].ambient", pointLightColors[3] * 0.1f);
lightingShader.setVec3("pointLights[3].diffuse", pointLightColors[3]);
lightingShader.setVec3("pointLights[3].specular", pointLightColors[3]);
lightingShader.setFloat("pointLights[3].constant", 1.0f);
lightingShader.setFloat("pointLights[3].linear", 0.07f);
lightingShader.setFloat("pointLights[3].quadratic", 0.017f);

// SpotLight
lightingShader.setVec3("spotLight.position", camera.Position);
lightingShader.setVec3("spotLight.direction", camera.Front);
lightingShader.setVec3("spotLight.ambient", glm::vec3(0.0f, 0.0f, 0.0f));
lightingShader.setVec3("spotLight.diffuse", glm::vec3(0.0f, 1.0f, 0.0f));
lightingShader.setVec3("spotLight.specular", glm::vec3(0.0f, 1.0f, 0.0f));
lightingShader.setFloat("spotLight.constant", 1.0f);
lightingShader.setFloat("spotLight.linear", 0.07f);
lightingShader.setFloat("spotLight.quadratic", 0.017f);
lightingShader.setFloat("spotLight.cutOff", glm::cos(glm::radians(7.0f)));
lightingShader.setFloat("spotLight.outerCutOff", glm::cos(glm::radians(10.0f)));

